# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: |
  [development][merge]

on:
  push:
    branches:
      - app-develop
    paths:
      - '.github/workflows/**'

  pull_request:
    branches: 
      - app-develop
    paths:
      - '.github/workflows/**'
      - 'pubspec.yaml'
      - 'pubspec.lock'
      - 'lib/**'
      - 'ios/**'
      - 'android/**'

jobs:
  build_and_deploy_app:
    runs-on: ${{ matrix.build.runs-os }}
    environment: development

    strategy:
      matrix:
        channel:
          # - dev
          - stable
        build:
          - platform: android
            runs-os: macos-latest
            path: build/android
            target: app
          - platform: ios
            runs-os: macos-latest
            path: build/ios
            target: app
          - platform: web
            runs-os: ubuntu-latest
            path: build/web
            target: app
          - platform: web
            runs-os: ubuntu-latest
            path: build/web
            target: story

    steps:
      # - name: My first step
      #   if: ${{ github.event_name == 'pull_request' && github.event.action == 'unassigned' }}
      #   run: echo This event is a pull request that had an assignee removed.

      # - run: echo "mypath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1.5.0
        with:
          flutter-version: '2.2.1'
          # channel: ${{ matrix.channel }}

      - name: Install global packages
        run: |
          dart pub global activate melos

      - name: Add pub cache bin to PATH
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Add pub cache to PATH
        run: echo "PUB_CACHE="$HOME/.pub-cache"" >> $GITHUB_ENV

      - run: flutter doctor -v
      
      - name: Install web dependencies
        uses: actions/setup-node@v1
        with:
          node-version: '14'
      - run: npm install -g firebase-tools

      - name: Install dependencies
        run: melos bootstrap

      - name: Build web
        if: ${{ matrix.build.platform == 'web' }}
        run: melos run build:web:${{ matrix.build.target }}
        continue-on-error: true

      # - run: flutter build apk
      #   continue-on-error: true
      # - run: flutter build appbundle
      #   continue-on-error: true
      # - run: flutter build ios --release --no-codesign
      #   continue-on-error: true

      # - run: flutter config --enable-windows-desktop
      # - run: flutter build windows
      #   continue-on-error: true

      - uses: FirebaseExtended/action-hosting-deploy@v0
        if: ${{ matrix.build.platform == 'web' }}
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_FLUX_DEV_7D354 }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          target: ${{ matrix.build.target }}

      # - run: firebase deploy -P ${{ github.event.inputs.environment || 'staging' }}
      #   env:
      #     FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      # - name: Archive Production Artifact
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: dist
      #     path: dist

      # - name: upload artifact to Firebase App Distribution
      #   uses: wzieba/Firebase-Distribution-Github-Action@v1
      #   with:
      #     appId: ${{secrets.FIREBASE_APP_ID}}
      #     token: ${{secrets.FIREBASE_TOKEN}}
      #     groups: testers
      #     file: app/build/outputs/apk/release/app-release-unsigned.apk

      # - name: Configure Keystore
      #   run: |
      #     echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
      #     echo "storeFile=upload-keystore.jks" >> key.properties
      #     echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
      #     echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
      #     echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
      #   env:
      #     PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
      #     KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
      #     KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
      #     KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
      #   working-directory: android

      # # Build and deploy with Fastlane (by default, to beta track) ðŸš€.
      # # Naturally, promote_to_production only deploys.
      # - run: bundle exec fastlane ${{ github.event.inputs.lane || 'beta' }}
      #   env:
      #     PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAY_STORE_CONFIG_JSON }}
      #   working-directory: android

  # build_and_deploy_story:
  #   needs: build_and_deploy_app
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: subosito/flutter-action@v1.5.0
  #       with:
  #         flutter-version: '2.2.1'

  #     - name: Install global packages
  #       run: |
  #         dart pub global activate melos

  #     - name: Add pub cache bin to PATH
  #       run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

  #     - name: Add pub cache to PATH
  #       run: echo "PUB_CACHE="$HOME/.pub-cache"" >> $GITHUB_ENV

  #     - name: Install dependencies
  #       run: melos bootstrap

  #     - name: Build web
  #       run: 'melos run build:web:story'
  #     - uses: FirebaseExtended/action-hosting-deploy@v0
  #       with:
  #         repoToken: '${{ secrets.GITHUB_TOKEN }}'
  #         firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_FLUX_DEV_7D354 }}'
  #         channelId: live
  #         projectId: flux-dev-7d354
  #         target: story

  # job1:
  #   runs-on: ubuntu-latest
  #   # Map a step output to a job output
  #   outputs:
  #     output1: ${{ steps.step1.outputs.test }}
  #     output2: ${{ steps.step2.outputs.test }}
  #   steps:
  #     - id: step1
  #       run: echo "::set-output name=test::hello"
  #     - id: step2
  #       run: echo "::set-output name=test::world"
  # job2:
  #   runs-on: ubuntu-latest
  #   needs: job1
  #   steps:
  #     - run: echo ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}
