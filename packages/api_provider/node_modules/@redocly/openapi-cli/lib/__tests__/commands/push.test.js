"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const push_1 = require("../../commands/push");
jest.mock('fs');
jest.mock('node-fetch');
jest.mock('@redocly/openapi-core');
jest.mock('../../utils');
describe('push', () => {
    const redoclyClient = require('@redocly/openapi-core').__redoclyClient;
    beforeAll(() => {
        jest.spyOn(process.stdout, 'write').mockImplementation(() => true);
    });
    afterEach(() => {
        redoclyClient.createDefinitionVersion.mockClear();
        redoclyClient.updateDefinitionVersion.mockClear();
    });
    it('creates new definition', () => __awaiter(void 0, void 0, void 0, function* () {
        redoclyClient.getDefinitionVersion.mockImplementationOnce(() => ({ version: null }));
        yield push_1.handlePush({
            upsert: true,
            entrypoint: 'spec.yaml',
            destination: '@org/my-api@1.0.1',
            branchName: 'test',
        });
        expect(redoclyClient.createDefinitionVersion).toBeCalledTimes(1);
        expect(redoclyClient.updateDefinitionVersion).toBeCalledTimes(0);
    }));
    it('updates existing definition', () => __awaiter(void 0, void 0, void 0, function* () {
        redoclyClient.getDefinitionVersion.mockImplementationOnce(() => ({ version: '1.0.0' }));
        yield push_1.handlePush({
            upsert: true,
            entrypoint: 'spec.json',
            destination: '@org/my-api@1.0.0',
            branchName: 'test',
        });
        expect(redoclyClient.createDefinitionVersion).toBeCalledTimes(0);
        expect(redoclyClient.updateDefinitionVersion).toBeCalledTimes(1);
    }));
});
