"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const openapi_core_1 = require("@redocly/openapi-core");
const bundle_1 = require("../../commands/bundle");
jest.mock('@redocly/openapi-core');
jest.mock('../../utils');
describe('bundle', () => {
    beforeAll(() => {
        jest.spyOn(process, 'exit').mockImplementation();
        jest.spyOn(process.stderr, 'write').mockImplementation(() => true);
    });
    afterEach(() => {
        openapi_core_1.lint.mockClear();
        openapi_core_1.bundle.mockClear();
    });
    it('bundles definitions w/o linting', () => __awaiter(void 0, void 0, void 0, function* () {
        const entrypoints = ['foo.yaml', 'bar.yaml'];
        yield bundle_1.handleBundle({
            entrypoints,
            ext: 'yaml',
            format: 'codeframe',
        }, '1.0.0');
        expect(openapi_core_1.lint).toBeCalledTimes(0);
        expect(openapi_core_1.bundle).toBeCalledTimes(entrypoints.length);
    }));
    it('bundles definitions w/ linting', () => __awaiter(void 0, void 0, void 0, function* () {
        const entrypoints = ['foo.yaml', 'bar.yaml', 'foobar.yaml'];
        yield bundle_1.handleBundle({
            entrypoints,
            ext: 'yaml',
            format: 'codeframe',
            lint: true,
        }, '1.0.0');
        expect(openapi_core_1.lint).toBeCalledTimes(entrypoints.length);
        expect(openapi_core_1.bundle).toBeCalledTimes(entrypoints.length);
    }));
});
