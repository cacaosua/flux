openapi: 3.0.0
servers:
  - url: 'https://{environment}.newapp.com.vn'
    variables:
      environment:
        default: api
        enum:
          - api
          - api-dev
          - api-qa
info:
  description: >-
    This is a sample server Petstore server. For this sample, you can use the
    api key `special-key` to test the authorization filters.
  version: 1.0.0
  title: OpenAPI Petstore
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /identity/auth/status:
    post:
      operationId: loginByEmailOrPhone
      description: Login status
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParameters'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  data:
                    type: object
                    properties:
                      result:
                        type: object
                        properties:
                          unblockAt:
                            type: string
                            default: ''
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/ResponseDefault'
  /connect/token:
    post:
      summary: Login Form Encoded
      operationId: loginFormEncoded
      description: Info for a specific pet
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                description: Error
                properties:
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                    default: ''
                  expires_in:
                    type: integer
                    default: 0
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
  /identity/auth/login/oauth2:
    post:
      summary: Login status
      operationId: loginByExternalProvider
      description: Info for a specific pet
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginSocialParameters'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    default: false
                  result:
                    $ref: '#/components/schemas/Credentials'
                    nullable: true
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  errorMessage:
                    type: string
                    default: ''
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/ResponseDefault'
  /identity/authenticated/auth/logout:
    post:
      summary: Log out service
      operationId: logout
      description: Handle logging out an account
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/Error'
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/ResponseDefault'
  /identity/auth/register:
    post:
      summary: Register
      operationId: registerByEmailOrPhone
      description: Register
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterParameters'
      responses:
        default:
          $ref: '#/components/responses/ResponseDefault'
  /identity/account/verify:
    post:
      operationId: verifyOTP
      description: Register
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOtpParameters'
      responses:
        '200':
          description: Response Default
          content:
            application/json:
              schema:
                type: object
                description: Error
                properties:
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                    nullable: true
                  errorMessage:
                    type: string
                    nullable: true
                    default: ''
                  result:
                    $ref: '#/components/schemas/Credentials'
  /identity/account/password/forgot:
    post:
      operationId: forgotPassword
      summary: Forgot Password
      description: Forgot Password
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordParameters'
      responses:
        '200':
          description: Forgot Password success
        default:
          $ref: '#/components/responses/ResponseDefault'
  /identity/account/password/check-recovery-code:
    post:
      operationId: verifyforgotPassword
      summary: Verify Forgot Password
      description: Verify Forgot Password
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyForgotPasswordParameters'
      responses:
        '200':
          description: Verify Forgot Password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    default: false
                  result:
                    $ref: '#/components/schemas/VerifyOtpForgotPasswordResponseModel'
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  errorMessage:
                    type: string
                    default: ''
        default:
          $ref: '#/components/responses/ResponseDefault'
  /identity/account/password/set-new-password:
    post:
      operationId: changePassword
      summary: Change Password
      description: Change Password
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordParameters'
      responses:
        '200':
          description: Change Password success
        default:
          $ref: '#/components/responses/ResponseDefault'
  /identity/account/resend-verify-code:
    post:
      operationId: resentOTP
      summary: Resent OTP
      description: Resent OTP
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResentOtpParameters'
      responses:
        '200':
          description: Get video success
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/ResponseDefault'
  /identity/auth/refresh-token:
    post:
      operationId: refreshToken
      description: refresh token after a priod
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenParameters'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
  /users/users/profile/me:
    get:
      operationId: userInfo
      summary: Get User Info
      description: Get User Info
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
        - name: deviceId
          in: query
          required: true
          schema:
            type: string
          example: deviceId
          default: ''
        - name: deviceType
          in: query
          required: true
          schema:
            type: string
          example: deviceType
          default: ''
      responses:
        '200':
          description: Get User Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    default: false
                  result:
                    $ref: '#/components/schemas/User'
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  errorMessage:
                    type: string
                    default: ''
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/Error'
  /identity/authenticated/auth/change-password:
    post:
      operationId: profileChangePassword
      summary: Profile change password
      description: Profile change password
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordParameters'
      responses:
        '200':
          description: Profile change password success
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/Error'
  /users/users/profile:
    post:
      operationId: updateProfile
      description: Update Profile
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateProfileParameters'
            encoding:
              avatarImage:
                contentType: 'image/png, image/jpeg'
                headers:
                  X-Rate-Limit-Limit:
                    description: The number of allowed requests in the current period
                    schema:
                      type: integer
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
  /users/users/settings:
    post:
      operationId: updatePNSetting
      description: Update Push Notification
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePNSettingsParameters'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePNSettingsResponse'
  /payment/transactions/me:
    get:
      operationId: historyPayment
      summary: Get history payment
      description: Get history payment
      tags:
        - Payment
      parameters:
        - $ref: '#/components/parameters/AppId'
        - name: page
          in: query
          required: true
          schema:
            type: integer
          example: 1
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
          example: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get history payment success
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    default: false
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  errorMessage:
                    type: string
                    default: ''
        '201':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
        '503':
          $ref: '#/components/responses/UnexpectedError'
        default:
          $ref: '#/components/responses/Error'
  /payment/tickets:
    post:
      operationId: payment
      summary: Payment
      description: Payment
      tags:
        - Payment
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentParameters'
      responses:
        '200':
          description: Payment success
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    default: false
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  errorMessage:
                    type: string
                    default: ''
        default:
          $ref: '#/components/responses/Error'
  /payment/tokens/braintree:
    get:
      operationId: getClientToken
      summary: Get Client Token
      description: Get Client Token
      tags:
        - Payment
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get Client Token success
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    default: false
                  result:
                    $ref: '#/components/schemas/ClientToken'
                  errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                  errorMessage:
                    type: string
                    default: ''
        default:
          $ref: '#/components/responses/Error'
  /notification/notification/register-device:
    post:
      operationId: registerDevice
      description: 'Register device with Cloud message, APNs or FCM'
      tags:
        - Notification
      parameters:
        - $ref: '#/components/parameters/AppId'
      security:
        - bearerAuth: []
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceParameters'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDeviceResponse'
components:
  schemas:
    AuthenError-ref:
      $ref: '#/components/schemas/AuthenError'
    AppUpdateStatus-ref:
      $ref: '#/components/schemas/AppUpdateStatus'
    CommentModel-ref:
      $ref: '#/components/schemas/CommentModel'
    EmailCredentials-ref:
      $ref: '#/components/schemas/EmailCredentials'
    ErrorCode-ref:
      $ref: '#/components/schemas/ErrorCode'
    ErrorResponse-ref:
      $ref: '#/components/schemas/ErrorResponse'
    ExpandingState-ref:
      $ref: '#/components/schemas/ExpandingState'
    ExternalProvider-ref:
      $ref: '#/components/schemas/ExternalProvider'
    FBSRemoteConfigs-ref:
      $ref: '#/components/schemas/FBSRemoteConfigs'
    FSLabel-ref:
      $ref: '#/components/schemas/FSLabel'
    LoadingState-ref:
      $ref: '#/components/schemas/LoadingState'
    MobileCredentials-ref:
      $ref: '#/components/schemas/MobileCredentials'
    NotificationName-ref:
      $ref: '#/components/schemas/NotificationName'
    NetworkStateResult-ref:
      $ref: '#/components/schemas/NetworkStateResult'
    PlatformParameter-ref:
      $ref: '#/components/schemas/PlatformParameter'
    ProviderType-ref:
      $ref: '#/components/schemas/ProviderType'
    StatusCode-ref:
      $ref: '#/components/schemas/StatusCode'
    TransactionModel-ref:
      $ref: '#/components/schemas/TransactionModel'
    User-ref:
      $ref: '#/components/schemas/User'
    UserState-ref:
      $ref: '#/components/schemas/UserState'
    PaymentError-ref:
      $ref: '#/components/schemas/PaymentError'
    PaypalParameter-ref:
      $ref: '#/components/schemas/PaypalParameter'
    MoMoParameters-ref:
      $ref: '#/components/schemas/MoMoParameters'
    CommentState-ref:
      $ref: '#/components/schemas/CommentState'
    PostEmotion-ref:
      $ref: '#/components/schemas/PostEmotion'
    AuthParameters:
      type: object
      description: data
      properties:
        password:
          type: string
        client_secret:
          type: string
        scope:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
      required:
        - password
        - client_secret
        - scope
    ClientId:
      type: string
      default: mobile
      example: mobile
    LoginParameters:
      allOf:
        - $ref: '#/components/schemas/AuthParameters'
        - type: object
          description: data
          properties:
            client_id:
              $ref: '#/components/schemas/ClientId'
              description: used in login account
          required:
            - client_id
    ErrorCode:
      type: integer
      description: ErrorCode
      enum:
        - -999
        - -2
        - 1018
        - 1011
        - 1008
        - 1007
        - 1024
        - 1025
        - 40001
        - 1015
        - 1016
        - 1001
        - 1002
        - 1003
        - 1004
        - 1010
        - 1012
        - 1021
        - 1022
        - 8000
        - 8001
        - -998
        - -997
        - 3001
        - 88888
      x-enum-varnames:
        - SystemError
        - NetworkUnavailable
        - UserAlreadyExists
        - PhoneNumberNotVerified
        - LoginUserNotFound
        - EmailOrPhoneNumberIsRequired
        - UserSuspended
        - UserLoggedInOnAnotherDevice
        - RegisterExistAccount
        - WrongOTP
        - ExpiredOTP
        - RegisterDuplicateUserName
        - RegisterRequiredEmailOrPhone
        - RegisterRequiredLastName
        - RegisterRequiredFirstName
        - EmailNotVerified
        - UserIsBlocked
        - PasswordNotCorrect
        - NewPasswordSameOldPassword
        - UserPurchasedThisTicket
        - LiveStreamHasEnded
        - PaypalError
        - AdsError
        - Cancel
        - noError
    ClientSecret:
      type: string
      example: 5fv3v4v34vv4r3v4
    Scope:
      type: string
      default: openid offline_access
      example: openid offline_access
    DeviceId:
      name: deviceId
      type: string
      format: uuid
    DeviceType:
      name: deviceType
      type: string
      description: DeviceType
      enum:
        - IPHONE
        - ANDROID
        - TABLET
        - WEB
        - TV
    LoginSocialParameters:
      type: object
      description: data
      properties:
        GrantType:
          type: string
          default: external
          example: external
        client_id:
          $ref: '#/components/schemas/ClientId'
        client_secret:
          $ref: '#/components/schemas/ClientSecret'
        scope:
          $ref: '#/components/schemas/Scope'
        ExternalToken:
          type: string
          description: token from social sign-in service
        Provider:
          type: string
        device_id:
          $ref: '#/components/schemas/DeviceId'
        device_type:
          $ref: '#/components/schemas/DeviceType'
      required:
        - GrantType
        - client_id
        - client_secret
        - scope
        - ExternalToken
        - Provider
        - device_id
        - device_type
    Credentials:
      type: object
      description: Credentials
      properties:
        access_token:
          type: string
          default: ''
        refresh_token:
          type: string
          default: ''
        expires_in:
          type: integer
          default: 0
        lastAccessDate:
          type: string
          format: date-time
          default: now
        token_type:
          type: string
          default: ''
          example: Bearer
        scope:
          type: string
          default: ''
          example: offline_access openid
        unblockAt:
          type: string
          format: date-time
    RegisterParameters:
      allOf:
        - $ref: '#/components/schemas/AuthParameters'
        - type: object
          description: data
          properties:
            clientId:
              $ref: '#/components/schemas/ClientId'
              description: used in register account
          required:
            - clientId
    VerifyCode:
      type: string
    VerifyOtpParameters:
      type: object
      description: data
      properties:
        phoneNumber:
          type: string
        email:
          type: string
        client_id:
          $ref: '#/components/schemas/ClientId'
        client_secret:
          $ref: '#/components/schemas/ClientSecret'
        scope:
          $ref: '#/components/schemas/Scope'
        device_id:
          $ref: '#/components/schemas/DeviceId'
        device_type:
          $ref: '#/components/schemas/DeviceType'
        verifyCode:
          $ref: '#/components/schemas/VerifyCode'
        password:
          type: string
      required:
        - password
        - client_id
        - client_secret
        - scope
    ForgotPasswordParameters:
      type: object
      properties:
        client_id:
          $ref: '#/components/schemas/ClientId'
        phoneNumber:
          type: string
        email:
          type: string
    VerifyForgotPasswordParameters:
      type: object
      properties:
        verifyCode:
          type: string
        username:
          type: string
    VerifyOtpForgotPasswordResponseModel:
      type: object
      description: VerifyOtpForgotPasswordResponseModel
      properties:
        recoveryToken:
          type: string
    ChangePasswordParameters:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        client_id:
          $ref: '#/components/schemas/ClientId'
        client_secret:
          $ref: '#/components/schemas/ClientSecret'
        scope:
          $ref: '#/components/schemas/Scope'
        token:
          type: string
    ResentOtpParameters:
      type: object
      properties:
        phoneNumber:
          type: string
        email:
          type: string
    RefreshToken:
      type: string
      format: uuid
      default: ''
    RefreshTokenParameters:
      type: object
      description: RefreshTokenParameters
      properties:
        client_id:
          $ref: '#/components/schemas/ClientId'
        client_secret:
          $ref: '#/components/schemas/ClientSecret'
        scope:
          $ref: '#/components/schemas/Scope'
        refresh_token:
          $ref: '#/components/schemas/RefreshToken'
      required:
        - client_id
        - client_secret
        - scope
        - refresh_token
    ErrorMessage:
      name: errorMessage
      type: string
      default: ''
    Successful:
      name: successful
      type: boolean
      default: false
    RefreshTokenResponse:
      description: RefreshTokenResponse
      type: object
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          nullable: true
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
        successful:
          $ref: '#/components/schemas/Successful'
        result:
          $ref: '#/components/schemas/Credentials'
    PhoneNumber:
      type: string
      default: ''
    Email:
      type: string
      default: ''
    UserName:
      name: userName
      type: string
      default: ''
    FirstName:
      name: firstName
      type: string
      default: ''
    LastName:
      name: lastName
      type: string
      default: ''
    IsReceiveNotification:
      type: boolean
      default: false
    ProviderType:
      type: string
      description: ProviderType
      enum:
        - facebook
        - google
        - apple
        - manual
    User:
      type: object
      description: User model data
      properties:
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        email:
          $ref: '#/components/schemas/Email'
        userName:
          $ref: '#/components/schemas/UserName'
        username:
          $ref: '#/components/schemas/UserName'
        password:
          type: string
        fullName:
          type: string
        displayName:
          type: string
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        avatarUrl:
          type: string
        avatar:
          type: string
        userId:
          type: string
        isReceiveNotification:
          $ref: '#/components/schemas/IsReceiveNotification'
        status:
          type: string
          default: ''
          example: SUSPENDED
        registerTime:
          type: string
          format: date-time
        providerType:
          $ref: '#/components/schemas/ProviderType'
    PasswordParameters:
      type: object
      properties:
        oldPassword:
          type: string
          default: ''
        newPassword:
          type: string
          default: ''
      required:
        - oldPassword
        - newPassword
    UpdateProfileParameters:
      type: object
      description: UpdateProfileParameters
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        userName:
          $ref: '#/components/schemas/UserName'
        avatarImage:
          type: MultipartFile
      required:
        - firstName
        - lastName
    UpdateProfileResponse:
      type: object
      description: UpdateProfileResponse
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          nullable: true
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
        result:
          $ref: '#/components/schemas/User'
        successful:
          $ref: '#/components/schemas/Successful'
    UpdatePNSettingsParameters:
      type: object
      description: UpdatePNSettingsParameters
      properties:
        isReceiveNotification:
          $ref: '#/components/schemas/IsReceiveNotification'
      required:
        - isReceiveNotification
    UpdatePNSettingsResponse:
      type: object
      description: UpdatePNSettingsResponse
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          nullable: true
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          default: ''
        result:
          type: object
          properties:
            userId:
              type: string
              format: uuid
            isReceiveNotification:
              $ref: '#/components/schemas/IsReceiveNotification'
    PaymentParameters:
      type: object
      description: PaymentParameters
      properties:
        LiveStreamId:
          type: string
          default: ''
        Username:
          type: string
          default: ''
        paymentMethod:
          type: string
          default: ''
        amount:
          type: number
          format: double
          nullable: true
        paymentMethodNonce:
          type: string
          default: ''
        deviceData:
          type: string
          default: ''
        phoneNumber:
          type: string
          default: ''
        momoToken:
          type: string
          default: ''
      required:
        - LiveStreamId
        - Username
    ClientToken:
      type: object
      description: ClientTokenModel
      properties:
        token:
          type: string
          default: ''
    DeviceToken:
      name: deviceToken
      type: string
      format: uuid
    DevicePlatform:
      name: platform
      type: string
      description: DevicePlatform
      enum:
        - ios
        - android
    RegisterDeviceParameters:
      type: object
      description: RegisterDeviceParameters
      properties:
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        deviceToken:
          $ref: '#/components/schemas/DeviceToken'
        platform:
          $ref: '#/components/schemas/DevicePlatform'
      required:
        - deviceId
        - deviceToken
        - platform
    RegisterDeviceResponse:
      type: object
      description: RegisterDeviceResponse
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          nullable: true
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
        successful:
          $ref: '#/components/schemas/Successful'
    ErrorDetails:
      type: object
      description: ChannelModel
      properties:
        error:
          $ref: '#/components/schemas/ErrorCode'
    AuthenError:
      allOf:
        - $ref: '#/components/schemas/ErrorDetails'
        - type: object
          properties:
            unblockAt:
              type: string
              format: date-time
    AppUpdateStatus:
      type: string
      description: AppUpdateStatus
      enum:
        - no_update
        - recommended_update
        - forced_update
        - skipped_update
    CommentModel:
      type: object
      description: CommentModel
      properties:
        id:
          type: string
          format: uuid
          default: 1
        videoId:
          type: string
        userId:
          type: string
        userName:
          $ref: '#/components/schemas/UserName'
          default: ''
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
          default: ''
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
          default: ''
        commentContent:
          type: string
          default: ''
        avatarUrl:
          type: string
          default: ''
        createdAt:
          type: string
          format: date-time
        updateAt:
          type: string
          format: date-time
        fullName:
          type: string
          default: ''
        isHidden:
          type: boolean
          default: false
        editable:
          type: boolean
          default: false
        isExpanding:
          type: boolean
          default: false
    EmailCredentials:
      type: object
      description: Email Credentials
      properties:
        email:
          type: string
        password:
          type: string
    ErrorResponse:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: string
          example:
            value: 'API{id}'
            variables:
              id:
                type: integer
                minimum: 100
                maximum: 999
    ExpandingState:
      type: integer
      description: ExpandingState
      enum:
        - 0
        - 1
        - 2
      x-enum-varnames:
        - None
        - Collapse
        - Expand
    ExternalProvider:
      type: string
      description: ExternalProvider
      enum:
        - apple
        - facebook
        - google
    FBSRemoteConfigs:
      type: object
      description: FBSRemoteConfigs
      properties:
        isDisablePhoneLogin:
          type: boolean
        serverDown:
          type: boolean
          default: false
        iOSBuildNumberForceUpdate:
          type: integer
          default: 0
        iOSCurrentBuildNumber:
          type: integer
          default: 0
        androidBuildNumberForceUpdate:
          type: integer
          default: 0
        androidCurrentBuildNumber:
          type: integer
          default: 0
        addtionalProperty1:
          type: string
        appstoreId:
          type: string
          example: id284882215
        playstoreId:
          type: string
          example: com.facebook.katana
        privacyAndPolicyLink:
          type: string
          example: 'https://www.new_project.ph/app/privacy-and-policy.html?hide-ui'
        termAndConditionsLink:
          type: string
          example: 'https://www.new_project.ph/app/terms-and-conditions.html?hide-ui'
        localizationVersion:
          type: string
          example: 1.3.5
        dashboardBannerType:
          type: string
          description: Dashboard > Banner type
          enum:
            - type_1
            - type_2
            - type_3
          default: type_1
    FSLabel:
      type: string
      description: FSLabel
      enum:
        - users
        - UserId
        - InactiveDevices
        - DeviceId
        - devicesLogoutIssue
        - externalStreamId
        - errorLiveStream
        - appConfigs
        - remoteConfigs
        - iOSBuildNumberForceUpdate
        - iOSCurrentBuildNumber
        - isDisablePhoneLogin
        - interactions
        - emoticons
        - comments
        - latestComments
        - id
        - views
        - status
        - isDisabledComment
        - content
        - createdAt
        - user
        - totalReactions
        - totalUserChosen
        - advertisement
        - avatar
        - firstName
        - lastName
    LoadingState:
      type: integer
      description: LoadingState
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
      x-enum-varnames:
        - New
        - Loading
        - LoadingMore
        - PullToRefresh
        - InvalidToken
        - Finish
        - Error
        - Empty
        - End
        - UserSuspended
        - UserHasLoggedInAnotherDevice
      default: 0
    MobileCredentials:
      type: object
      description: Mobile Credentials
      properties:
        phone:
          type: string
        password:
          type: string
    NotificationName:
      type: string
      description: NotificationName
      enum:
        - RequestReachOffline
        - ChangePassword
        - InvalidToken
        - ServerDown
        - ReachabilityChanged
    NetworkState:
      type: string
      enum:
        - online
        - offline
    NetworkStateResult:
      type: object
      properties:
        time:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/NetworkState'
    PlatformParameter:
      type: string
      description: PlatformParameter
      enum:
        - APP
        - WEB
    StatusCode:
      type: integer
      description: StatusCode
      enum:
        - 200
        - 201
        - 400
        - 401
        - 403
        - 404
        - 500
        - 503
      default: -1
      x-enum-varnames:
        - success
        - success201
        - wrongParams
        - wrongToken
        - noRight
        - notFound
        - serverError
        - serverDown
    TransactionModel:
      type: object
      description: TransactionModel
      properties:
        id:
          type: string
          default: ''
        liveStreamId:
          type: string
          default: ''
        title:
          type: string
          default: ''
        paymentMethod:
          type: string
          default: ''
        price:
          type: integer
          default: 0
        thumbnailUrl:
          type: string
          default: ''
        ticketImage:
          type: string
          default: ''
        liveStreamStartTime:
          type: string
          format: date-time
        createdPurchase:
          type: string
          format: date-time
    UserState:
      type: string
      description: state of user
      enum:
        - nonSignedIn
        - signUp
        - verifyOtp
        - signedIn
        - inHome
    PaymentError:
      allOf:
        - $ref: '#/components/schemas/ErrorDetails'
    PaypalParameter:
      type: object
      properties:
        nonce:
          type: string
          default: ''
        amountUSD:
          type: number
          format: double
          default: 0
        username:
          type: string
          default: ''
        liveStreamId:
          type: string
          default: ''
        deviceId:
          type: string
          default: ''
    MoMoParameters:
      type: object
      properties:
        phoneNumber:
          type: string
          default: ''
        token:
          type: string
          default: ''
    CommentState:
      type: object
      description: Comment Status
      properties:
        createComment:
          type: boolean
          default: false
        loadmoreComment:
          type: boolean
          default: false
        commentId:
          type: string
          default: ''
    PostEmotion:
      type: object
      properties:
        liveStreamId:
          type: string
        userId:
          type: string
        emoticonId:
          type: string
        count:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    AppId:
      name: appId
      in: header
      required: true
      schema:
        type: string
      example: NewApp
  responses:
    ResponseDefault:
      description: Response Default
      content:
        application/json:
          schema:
            type: object
            description: Error
            properties:
              errorCode:
                $ref: '#/components/schemas/ErrorCode'
                nullable: true
              errorMessage:
                type: string
                nullable: true
                default: ''
              data:
                type: object
                additionalProperties: true
                nullable: true
                default: {}
    UnauthorizedError:
      description: Access token is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    UnexpectedError:
      description: Unexpected error.
    Error:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            description: Error
            properties:
              errorCode:
                $ref: '#/components/schemas/ErrorCode'
                nullable: true
              errorMessage:
                type: string
                nullable: true
                default: ''
